
% Journals

% First the Full Name is given, then the abbreviation used in the AMS Math
% Reviews, with an indication if it could not be found there.
% Note the 2nd overwrites the 1st, so swap them if you want the full name.

 %{AMS}
 @String{AMSTrans = "American Mathematical Society Translations" }
 @String{AMSTrans = "Amer. Math. Soc. Transl." }
 @String{BullAMS = "Bulletin of the American Mathematical Society" }
 @String{BullAMS = "Bull. Amer. Math. Soc." }
 @String{ProcAMS = "Proceedings of the American Mathematical Society" }
 @String{ProcAMS = "Proc. Amer. Math. Soc." }
 @String{TransAMS = "Transactions of the American Mathematical Society" }
 @String{TransAMS = "Trans. Amer. Math. Soc." }

 %ACM
 @String{CACM = "Communications of the {ACM}" }
 @String{CACM = "Commun. {ACM}" }
 @String{CompServ = "Comput. Surveys" }
 @String{JACM = "J. ACM" }
 @String{ACMMathSoft = "{ACM} Transactions on Mathematical Software" }
 @String{ACMMathSoft = "{ACM} Trans. Math. Software" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newsletter" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newslett." }

 @String{AmerSocio = "American Journal of Sociology" }
 @String{AmerStatAssoc = "Journal of the American Statistical Association" }
 @String{AmerStatAssoc = "J. Amer. Statist. Assoc." }
 @String{ApplMathComp = "Applied Mathematics and Computation" }
 @String{ApplMathComp = "Appl. Math. Comput." }
 @String{AmerMathMonthly = "American Mathematical Monthly" }
 @String{AmerMathMonthly = "Amer. Math. Monthly" }
 @String{BIT = "{BIT}" }
 @String{BritStatPsych = "British Journal of Mathematical and Statistical
          Psychology" }
 @String{BritStatPsych = "Brit. J. Math. Statist. Psych." }
 @String{CanMathBull = "Canadian Mathematical Bulletin" }
 @String{CanMathBull = "Canad. Math. Bull." }
 @String{CompApplMath = "Journal of Computational and Applied Mathematics" }
 @String{CompApplMath = "J. Comput. Appl. Math." }
 @String{CompPhys = "Journal of Computational Physics" }
 @String{CompPhys = "J. Comput. Phys." }
 @String{CompStruct = "Computers and Structures" }
 @String{CompStruct = "Comput. \& Structures" }
 @String{CompJour = "The Computer Journal" }
 @String{CompJour = "Comput. J." }
 @String{CompSysSci = "Journal of Computer and System Sciences" }
 @String{CompSysSci = "J. Comput. System Sci." }
 @String{Computing = "Computing" }
 @String{ContempMath = "Contemporary Mathematics" }
 @String{ContempMath = "Contemp. Math." }
 @String{Crelle = "Crelle's Journal" }
 @String{GiornaleMath = "Giornale di Mathematiche" }
 @String{GiornaleMath = "Giorn. Mat." } % didn't find in AMS MR., ibid.

 %IEEE
 @String{Computer = "{IEEE} Computer" }
 @String{IEEETransComp = "{IEEE} Transactions on Computers" }
 @String{IEEETransComp = "{IEEE} Trans. Comput." }
 @String{IEEETransAC = "{IEEE} Transactions on Automatic Control" }
 @String{IEEETransAC = "{IEEE} Trans. Automat. Control" }
 @String{IEEESpec = "{IEEE} Spectrum" } % didn't find in AMS MR
 @String{ProcIEEE = "Proceedings of the {IEEE}" }
 @String{ProcIEEE = "Proc. {IEEE}" } % didn't find in AMS MR
 @String{IEEETransAeroElec = "{IEEE} Transactions on Aerospace and Electronic
     Systems" }
 @String{IEEETransAeroElec = "{IEEE} Trans. Aerospace Electron. Systems" }

 @String{IMANumerAna = "{IMA} Journal of Numerical Analysis" }
 @String{IMANumerAna = "{IMA} J. Numer. Anal." }
 @String{InfProcLet = "Information Processing Letters" }
 @String{InfProcLet = "Inform. Process. Lett." }
 @String{InstMathApp = "Journal of the Institute of Mathematics and
     its Applications" }
 @String{InstMathApp = "J. Inst. Math. Appl." }
 @String{IntControl = "International Journal of Control" }
 @String{IntControl = "Internat. J. Control" }
 @String{IntNumerEng = "International Journal for Numerical Methods in
     Engineering" }
 @String{IntNumerEng = "Internat. J. Numer. Methods Engrg." }
 @String{IntSuper = "International Journal of Supercomputing Applications" }
 @String{IntSuper = "Internat. J. Supercomputing Applic." } % didn't find
%% in AMS MR
 @String{Kibernetika = "Kibernetika" }
 @String{JResNatBurStand = "Journal of Research of the National Bureau
     of Standards" }
 @String{JResNatBurStand = "J. Res. Nat. Bur. Standards" }
 @String{LinAlgApp = "Linear Algebra and its Applications" }
 @String{LinAlgApp = "Linear Algebra Appl." }
 @String{MathAnaAppl = "Journal of Mathematical Analysis and Applications" }
 @String{MathAnaAppl = "J. Math. Anal. Appl." }
 @String{MathAnnalen = "Mathematische Annalen" }
 @String{MathAnnalen = "Math. Ann." }
 @String{MathPhys = "Journal of Mathematical Physics" }
 @String{MathPhys = "J. Math. Phys." }
 @String{MathComp = "Mathematics of Computation" }
 @String{MathComp = "Math. Comp." }
 @String{MathScand = "Mathematica Scandinavica" }
 @String{MathScand = "Math. Scand." }
 @String{TablesAidsComp = "Mathematical Tables and Other Aids to Computation" }
 @String{TablesAidsComp = "Math. Tables Aids Comput." }
 @String{NumerMath = "Numerische Mathematik" }
 @String{NumerMath = "Numer. Math." }
 @String{PacificMath = "Pacific Journal of Mathematics" }
 @String{PacificMath = "Pacific J. Math." }
 @String{ParDistComp = "Journal of Parallel and Distributed Computing" }
 @String{ParDistComp = "J. Parallel and Distrib. Comput." } % didn't find
%% in AMS MR
 @String{ParComputing = "Parallel Computing" }
 @String{ParComputing = "Parallel Comput." }
 @String{PhilMag = "Philosophical Magazine" }
 @String{PhilMag = "Philos. Mag." }
 @String{ProcNAS = "Proceedings of the National Academy of Sciences
                    of the USA" }
 @String{ProcNAS = "Proc. Nat. Acad. Sci. U. S. A." }
 @String{Psychometrika = "Psychometrika" }
 @String{QuartMath = "Quarterly Journal of Mathematics, Oxford, Series (2)" }
 @String{QuartMath = "Quart. J. Math. Oxford Ser. (2)" }
 @String{QuartApplMath = "Quarterly of Applied Mathematics" }
 @String{QuartApplMath = "Quart. Appl. Math." }
 @String{RevueInstStat = "Review of the International Statisical Institute" }
 @String{RevueInstStat = "Rev. Inst. Internat. Statist." }

 %SIAM
 @String{JSIAM = "Journal of the Society for Industrial and Applied
     Mathematics" }
 @String{JSIAM = "J. Soc. Indust. Appl. Math." }
 @String{JSIAMB = "Journal of the Society for Industrial and Applied
     Mathematics, Series B, Numerical Analysis" }
 @String{JSIAMB = "J. Soc. Indust. Appl. Math. Ser. B Numer. Anal." }
 @String{SIAMAlgMeth = "{SIAM} Journal on Algebraic and Discrete Methods" }
 @String{SIAMAlgMeth = "{SIAM} J. Algebraic Discrete Methods" }
 @String{SIAMAppMath = "{SIAM} Journal on Applied Mathematics" }
 @String{SIAMAppMath = "{SIAM} J. Appl. Math." }
 @String{SIAMComp = "{SIAM} Journal on Computing" }
 @String{SIAMComp = "{SIAM} J. Comput." }
 @String{SIAMMatrix = "{SIAM} Journal on Matrix Analysis and Applications" }
 @String{SIAMMatrix = "{SIAM} J. Matrix Anal. Appl." }
 @String{SIAMNumAnal = "{SIAM} Journal on Numerical Analysis" }
 @String{SIAMNumAnal = "{SIAM} J. Numer. Anal." }
 @String{SIAMReview = "{SIAM} Review" }
 @String{SIAMReview = "{SIAM} Rev." }
 @String{SIAMSciStat = "{SIAM} Journal on Scientific and Statistical
     Computing" }
 @String{SIAMSciStat = "{SIAM} J. Sci. Statist. Comput." }

 @String{SoftPracExp = "Software Practice and Experience" }
 @String{SoftPracExp = "Software Prac. Experience" } % didn't find in AMS MR
 @String{StatScience = "Statistical Science" }
 @String{StatScience = "Statist. Sci." }
 @String{Techno = "Technometrics" }
 @String{USSRCompMathPhys = "{USSR} Computational Mathematics and Mathematical
     Physics" }
 @String{USSRCompMathPhys = "{U. S. S. R.} Comput. Math. and Math. Phys." }
 @String{VLSICompSys = "Journal of {VLSI} and Computer Systems" }
 @String{VLSICompSys = "J. {VLSI} Comput. Syst." }
 @String{ZAngewMathMech = "Zeitschrift fur Angewandte Mathematik und
     Mechanik" }
 @String{ZAngewMathMech = "Z. Angew. Math. Mech." }
 @String{ZAngewMathPhys = "Zeitschrift fur Angewandte Mathematik und Physik" }
 @String{ZAngewMathPhys = "Z. Angew. Math. Phys." }

% Publishers % ================================================= |

 @String{Academic = "Academic Press" }
 @String{ACMPress = "{ACM} Press" }
 @String{AdamHilger = "Adam Hilger" }
 @String{AddisonWesley = "Addison-Wesley" }
 @String{AllynBacon = "Allyn and Bacon" }
 @String{AMS = "American Mathematical Society" }
 @String{Birkhauser = "Birkha{\"u}ser" }
 @String{CambridgePress = "Cambridge University Press" }
 @String{Chelsea = "Chelsea" }
 @String{ClaredonPress = "Claredon Press" }
 @String{DoverPub = "Dover Publications" }
 @String{Eyolles = "Eyolles" }
 @String{HoltRinehartWinston = "Holt, Rinehart and Winston" }
 @String{Interscience = "Interscience" }
 @String{JohnsHopkinsPress = "The Johns Hopkins University Press" }
 @String{JohnWileySons = "John Wiley and Sons" }
 @String{Macmillan = "Macmillan" }
 @String{MathWorks = "The Math Works Inc." }
 @String{McGrawHill = "McGraw-Hill" }
 @String{NatBurStd = "National Bureau of Standards" }
 @String{NorthHolland = "North-Holland" }
 @String{OxfordPress = "Oxford University Press" }  %address Oxford or London?
 @String{PergamonPress = "Pergamon Press" }
 @String{PlenumPress = "Plenum Press" }
 @String{PrenticeHall = "Prentice-Hall" }
 @String{SIAMPub = "{SIAM} Publications" }
 @String{Springer = "Springer-Verlag" }
 @String{TexasPress = "University of Texas Press" }
 @String{VanNostrand = "Van Nostrand" }
 @String{WHFreeman = "W. H. Freeman and Co." }

%Entries

@inproceedings{Kuijpers:2019:ESC:3335783.3335791,
 author = {Kuijpers, Jochem and Fletcher, George and Yakovets, Nikolay and Lindaaker, Tobias},
 title = {An Experimental Study of Context-Free Path Query Evaluation Methods},
 booktitle = {Proceedings of the 31st International Conference on Scientific and Statistical Database Management},
 series = {SSDBM '19},
 year = {2019},
 isbn = {978-1-4503-6216-0},
 location = {Santa Cruz, CA, USA},
 pages = {121--132},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/3335783.3335791},
 doi = {10.1145/3335783.3335791},
 acmid = {3335791},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article {SubgraphQueriesbyContextfreeGrammars,
      author = "Petteri Sevon and Lauri Eronen",
      title = "Subgraph Queries by Context-free Grammars",
      journal = "Journal of Integrative Bioinformatics",
      year = "2008",
      publisher = "De Gruyter",
      address = "Berlin, Boston",
      volume = "5",
      number = "2",
      doi = "https://doi.org/10.1515/jib-2008-100",
      pages=      "157 -- 172",
      url = "https://www.degruyter.com/view/journals/jib/5/2/article-p157.xml"
}

@inproceedings{Grigorev:2017:CPQ:3166094.3166104,
 author = {Grigorev, Semyon and Ragozina, Anastasiya},
 title = {Context-free Path Querying with Structural Representation of Result},
 booktitle = {Proceedings of the 13th Central \& Eastern European Software Engineering Conference in Russia},
 series = {CEE-SECR '17},
 year = {2017},
 isbn = {978-1-4503-6396-9},
 location = {St. Petersburg, Russia},
 pages = {10:1--10:7},
 articleno = {10},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/3166094.3166104},
 doi = {10.1145/3166094.3166104},
 acmid = {3166104},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFPQ, GLL, LL, context-free grammar, graph database, graph parsing, path query, top-down parsing},
}

@INPROCEEDINGS{8731467, 
author={H. {Miao} and A. {Deshpande}}, 
booktitle={2019 IEEE 35th International Conference on Data Engineering (ICDE)}, 
title={Understanding Data Science Lifecycle Provenance via Graph Segmentation and Summarization}, 
year={2019}, 
volume={}, 
number={}, 
pages={1710-1713},}

@inproceedings{10.1145/3398682.3399163,
author = {Terekhov, Arseniy and Khoroshev, Artyom and Azimov, Rustam and Grigorev, Semyon},
title = {Context-Free Path Querying with Single-Path Semantics by Matrix Multiplication},
year = {2020},
isbn = {9781450380218},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3398682.3399163},
doi = {10.1145/3398682.3399163},
abstract = {A recent study showed that the applicability of context-free path querying (CFPQ)
algorithms with relational query semantics integrated with graph databases is limited
because of low performance and high memory consumption of existing solutions. In this
work, we implement a matrix-based CFPQ algorithm by using appropriate high-performance
libraries for linear algebra and integrate it with RedisGraph graph database. Also,
we introduce a new CFPQ algorithm with single-path query semantics that allows us
to extract one found path for each pair of nodes. Finally, we provide the evaluation
of our algorithms for both semantics which shows that matrix-based CFPQ implementation
for Redis-Graph database is performant enough for real-world data analysis.},
booktitle = {Proceedings of the 3rd Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
articleno = {5},
numpages = {12},
keywords = {CUDA, context-free grammar, Context-free path querying, linear algebra, GPGPU, matrix multiplication, Boolean matrix, RedisGraph database, transitive closure, graph databases},
location = {Portland, OR, USA},
series = {GRADES-NDA'20}
}

@InProceedings{10.1007/978-3-319-91662-0_17,
  author="Santos, Fred C.
  and Costa, Umberto S.
  and Musicante, Martin A.",
  editor="Mikkonen, Tommi
  and Klamma, Ralf
  and Hern{\'a}ndez, Juan",
  title="A Bottom-Up Algorithm for Answering Context-Free Path Queries in Graph Databases",
  booktitle="Web Engineering",
  year="2018",
  publisher="Springer International Publishing",
  address="Cham",
  pages="225--233",
  abstract="Many computing applications require processing of data that are directly collected from the Internet. In this context, the use of the Resource Description Framework (RDF) has became a common feature. The query and analysis of RDF data is paramount to explore the full potential of the data available on the Web. Query languages for RDF graph databases rely on the use of regular expressions to identify paths over the data. Some interesting queries, such as same-generation queries, cannot be expressed by regular expressions. We are interested in extending the expressiveness of queries over graph databases by using paths defined by context-free grammars. We introduce a new query algorithm to process context-free path queries over graph databases. Our approach is inspired by the LR(1) parsing techniques. A prototype was implemented and experiments were conducted to validate and compare the results of our algorithm with those obtained by similar approaches.",
  isbn="978-3-319-91662-0"
}

@inproceedings{10.1145/3167132.3167265,
author = {Medeiros, Ciro M. and Musicante, Martin A. and Costa, Umberto S.},
title = {Efficient Evaluation of Context-Free Path Queries for Graph Databases},
year = {2018},
isbn = {9781450351911},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167132.3167265},
doi = {10.1145/3167132.3167265},
abstract = {We present a context-free path query evaluation algorithm inspired by top-down parsing
techniques. Given a graph and a query defined over a context-free grammar, our algorithm
identifies paths on the graph which form words of the language generated by the grammar.
We show that our algorithm is correct. We conduct performance evaluation experiments
with some popular ontologies and synthetic databases to endorse the efficiency of
our approach. The algorithm presents a cubic worst-case runtime complexity in terms
of the number of nodes in the graph, which is an improvement over previous work.},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
pages = {1230–1237},
numpages = {8},
keywords = {graph databases, context-free grammars, top-down parsing, query languages, context-free paths in graphs},
location = {Pau, France},
series = {SAC '18}
}

@inproceedings{Azimov:2018:CPQ:3210259.3210264,
 author = {Azimov, Rustam and Grigorev, Semyon},
 title = {Context-free Path Querying by Matrix Multiplication},
 booktitle = {Proceedings of the 1st ACM SIGMOD Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
 series = {GRADES-NDA '18},
 year = {2018},
 isbn = {978-1-4503-5695-4},
 location = {Houston, Texas},
 pages = {5:1--5:10},
 articleno = {5},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/3210259.3210264},
 doi = {10.1145/3210259.3210264},
 acmid = {3210264},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {GPGPU, context-free grammar, context-free path querying, graph databases, matrix multiplication, transitive closure},
}

@inproceedings{hellingsRelational,
  title={Conjunctive context-free path queries},
  author={Hellings, Jelle},
  booktitle={Proceedings of ICDT'14},
  pages={119--130},
  year={2014}
}

@InProceedings{10.1007/978-3-319-46523-4_38,
author="Zhang, Xiaowang
and Feng, Zhiyong
and Wang, Xin
and Rao, Guozheng
and Wu, Wenrui",
editor="Groth, Paul
and Simperl, Elena
and Gray, Alasdair
and Sabou, Marta
and Kr{\"o}tzsch, Markus
and Lecue, Freddy
and Fl{\"o}ck, Fabian
and Gil, Yolanda",
title="Context-Free Path Queries on RDF Graphs",
booktitle="The Semantic Web -- ISWC 2016",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="632--648",
abstract="Navigational graph queries are an important class of queries that can extract implicit binary relations over the nodes of input graphs. Most of the navigational query languages used in the RDF community, e.g. property paths in W3C SPARQL 1.1 and nested regular expressions in nSPARQL, are based on the regular expressions. It is known that regular expressions have limited expressivity; for instance, some natural queries, like same generation-queries, are not expressible with regular expressions. To overcome this limitation, in this paper, we present cfSPARQL, an extension of SPARQL query language equipped with context-free grammars. The cfSPARQL language is strictly more expressive than property paths and nested expressions. The additional expressivity can be used for modelling graph similarities, graph summarization and ontology alignment. Despite the increasing expressivity, we show that cfSPARQL still enjoys a low computational complexity and can be evaluated efficiently.",
isbn="978-3-319-46523-4"
}

@inproceedings{Zheng,
 author = {Zheng, Xin and Rugina, Radu},
 title = {Demand-driven Alias Analysis for C},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {197--208},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1328438.1328464},
 doi = {10.1145/1328438.1328464},
 acmid = {1328464},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFL reachability, alias analysis, demand-driven analysis, memory disambiguation, pointer analysis},
}

@article{10.1145/373243.360208,
author = {Rehof, Jakob and F\"{a}hndrich, Manuel},
title = {Type-Base Flow Analysis: From Polymorphic Subtyping to CFL-Reachability},
year = {2001},
issue_date = {March 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {3},
issn = {0362-1340},
url = {https://doi.org/10.1145/373243.360208},
doi = {10.1145/373243.360208},
journal = {SIGPLAN Not.},
month = jan,
pages = {54--66},
numpages = {13}
}

@InProceedings{10.1007/978-3-662-46663-6_5,
author="Afroozeh, Ali
and Izmaylova, Anastasia",
editor="Franke, Bj{\"o}rn",
title="Faster, Practical GLL Parsing",
booktitle="Compiler Construction",
year="2015",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="89--108",
abstract="Generalized LL (GLL) parsing is an extension of recursivedescent (RD) parsing that supports all context-free grammars in cubic time and space. GLL parsers have the direct relationship with the grammar that RD parsers have, and therefore, compared to GLR, are easier to understand, debug, and extend. This makes GLL parsing attractive for parsing programming languages.",
isbn="978-3-662-46663-6"
}

@InProceedings{10.1007/978-3-642-00982-2_35,
author="Hemerik, Kees",
editor="Dediu, Adrian Horia
and Ionescu, Armand Mihai
and Mart{\'i}n-Vide, Carlos",
title="Towards a Taxonomy for ECFG and RRPG Parsing",
booktitle="Language and Automata Theory and Applications",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="410--421",
abstract="Extended Context-Free Grammars (ECFGs) and Regular Right-Part Grammars (RRPGs) have many applications, but they are sparsely covered in the vast literature on parsing and grammars. This paper presents first steps towards a taxonomy of parsers for ECFGs and RRPGs, in order to make this subject more accessible.",
isbn="978-3-642-00982-2"
}

@inproceedings{DBLP:conf/edbt/TerekhovPAZG21,
  author    = {Arseniy Terekhov and
               Vlada Pogozhelskaya and
               Vadim Abzalov and
               Timur Zinnatulin and
               Semyon V. Grigorev},
  editor    = {Yannis Velegrakis and
               Demetris Zeinalipour{-}Yazti and
               Panos K. Chrysanthis and
               Francesco Guerra},
  title     = {Multiple-Source Context-Free Path Querying in Terms of Linear Algebra},
  booktitle = {Proceedings of the 24th International Conference on Extending Database
               Technology, {EDBT} 2021, Nicosia, Cyprus, March 23 - 26, 2021},
  pages     = {487--492},
  publisher = {OpenProceedings.org},
  year      = {2021},
  url       = {https://doi.org/10.5441/002/edbt.2021.56},
  doi       = {10.5441/002/edbt.2021.56},
  timestamp = {Sat, 20 Mar 2021 10:29:38 +0100},
  biburl    = {https://dblp.org/rec/conf/edbt/TerekhovPAZG21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{SCOTT2018120,
title = {GLL syntax analysers for EBNF grammars},
journal = {Science of Computer Programming},
volume = {166},
pages = {120-145},
year = {2018},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2018.06.001},
url = {https://www.sciencedirect.com/science/article/pii/S0167642318302375},
author = {Elizabeth Scott and Adrian Johnstone},
keywords = {General context-free grammars, Generalised LL parsing, Extended BNF},
abstract = {GLL is a worst-case cubic, recursive descent based parsing technique which can be applied to all BNF grammars without the need for grammar modification. However, EBNF grammars are often used, both for their compactness and their relative expressive simplicity. In this paper we give a formal specification for a parse tree representation of derivations which reflects the EBNF structure of the grammar, is worst case cubic size, and captures all derivations in the case of ambiguity. Particular care is need in the case of closures with nullable bodies. We also describe an extension of GLL which directly supports the EBNF constructs. The resulting parsers are worst case cubic and follow the structure of the specifying EBNF grammar, making the parser behaviour easy to reason about. The parsers exploit the efficiency of factorisation and the use of iteration rather than recursion, retaining the structure of the specification in the presence of embedded semantic actions.}
}

@article{SCOTT2010177,
title = {GLL Parsing},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {253},
number = {7},
pages = {177-189},
year = {2010},
note = {Proceedings of the Ninth Workshop on Language Descriptions Tools and Applications (LDTA 2009)},
issn = {1571-0661},
doi = {https://doi.org/10.1016/j.entcs.2010.08.041},
url = {https://www.sciencedirect.com/science/article/pii/S1571066110001209},
author = {Elizabeth Scott and Adrian Johnstone},
keywords = {generalised parsing, recursive descent, RNGLR and RIGLR parsing, context free languages},
abstract = {Recursive Descent (RD) parsers are popular because their control flow follows the structure of the grammar and hence they are easy to write and to debug. However, the class of grammars which admit RD parsers is very limited. Backtracking techniques may be used to extend this class, but can have explosive runtimes and cannot deal with grammars with left recursion. Tomita-style RNGLR parsers are fully general but are based on LR techniques and do not have the direct relationship with the grammar that an RD parser has. We develop the fully general GLL parsing technique which is recursive descent-like, and has the property that the parse follows closely the structure of the grammar rules, but uses RNGLR-like machinery to handle non-determinism. The resulting recognisers run in worst-case cubic time and can be built even for left recursive grammars.}
}
