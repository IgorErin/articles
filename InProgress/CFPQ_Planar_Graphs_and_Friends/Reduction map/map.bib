@article{valiant1975general,
	title={General context-free recognition in less than cubic time},
	author={Valiant, Leslie G},
	journal={Journal of computer and system sciences},
	volume={10},
	number={2},
	pages={308--315},
	year={1975},
	publisher={Academic Press}
}


@article{10.1145/505241.505242,
	author = {Lee, Lillian},
	title = {Fast Context-Free Grammar Parsing Requires Fast Boolean Matrix Multiplication},
	year = {2002},
	issue_date = {January 2002},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {49},
	number = {1},
	issn = {0004-5411},
	url = {https://doi.org/10.1145/505241.505242},
	doi = {10.1145/505241.505242},
	abstract = {In 1975, Valiant showed that Boolean matrix multiplication can be used for parsing
		context-free grammars (CFGs), yielding the asympotically fastest (although not practical)
		CFG parsing algorithm known. We prove a dual result: any CFG parser with time complexity
		O(gn3-∈), where g is the size of the grammar and n is the length of the input string,
		can be efficiently converted into an algorithm to multiply m \texttimes{} m Boolean matrices
		in time O(m3-∈/3). Given that practical, substantially subcubic Boolean matrix multiplication
		algorithms have been quite difficult to find, we thus explain why there has been little
		progress in developing practical, substantially subcubic general CFG parsers. In proving
		this result, we also develop a formalization of the notion of parsing.},
	journal = {J. ACM},
	month = jan,
	pages = {1–15},
	numpages = {15},
	keywords = {Boolean matrix multiplication, context-free grammar parsing}
}

@article{abboud2018if,
	title={If the current clique algorithms are optimal, so is Valiant's parser},
	author={Abboud, Amir and Backurs, Arturs and Williams, Virginia Vassilevska},
	journal={SIAM Journal on Computing},
	volume={47},
	number={6},
	pages={2527--2555},
	year={2018},
	publisher={SIAM}
}

@article{10.1145/3186893,
	author = {Williams, Virginia Vassilevska and Williams, R. Ryan},
	title = {Subcubic Equivalences Between Path, Matrix, and Triangle Problems},
	year = {2018},
	issue_date = {September 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {65},
	number = {5},
	issn = {0004-5411},
	url = {https://doi.org/10.1145/3186893},
	doi = {10.1145/3186893},
	abstract = {We say an algorithm on n \texttimes{} n matrices with integer entries in [−M,M] (or n-node graphs
		with edge weights from [−M,M]) is truly subcubic if it runs in O(n3 − δ undefined poly(log
		M)) time for some δ &gt; 0. We define a notion of subcubic reducibility and show that
		many important problems on graphs and matrices solvable in O(n3) time are equivalent
		under subcubic reductions. Namely, the following weighted problems either all have
		truly subcubic algorithms, or none of them do:•The all-pairs shortest paths problem
		on weighted digraphs (APSP).•Detecting if a weighted graph has a triangle of negative
		total edge weight.•Listing up to n2.99 negative triangles in an edge-weighted graph.•Finding
		a minimum weight cycle in a graph of non-negative edge weights.•The replacement paths
		problem on weighted digraphs.•Finding the second shortest simple path between two
		nodes in a weighted digraph.•Checking whether a given matrix defines a metric.•Verifying
		the correctness of a matrix product over the (min, +)-semiring.•Finding a maximum
		subarray in a given matrix.Therefore, if APSP cannot be solved in n3−ε time for any
		ε &gt; 0, then many other problems also need essentially cubic time. In fact, we show
		generic equivalences between matrix products over a large class of algebraic structures
		used in optimization, verifying a matrix product over the same structure, and corresponding
		triangle detection problems over the structure. These equivalences simplify prior
		work on subcubic algorithms for all-pairs path problems, since it now suffices to
		give appropriate subcubic triangle detection algorithms.Other consequences of our
		work are new combinatorial approaches to Boolean matrix multiplication over the (OR,AND)-semiring
		(abbreviated as BMM). We show that practical advances in triangle detection would
		imply practical BMM algorithms, among other results. Building on our techniques, we
		give two improved BMM algorithms: a derandomization of the combinatorial BMM algorithm
		of Bansal and Williams (FOCS’09), and an improved quantum algorithm for BMM.},
	journal = {J. ACM},
	month = aug,
	articleno = {27},
	numpages = {38},
	keywords = {all-pairs shortest paths, subcubic time, fine-grained reductions, Fine-grained complexity, equivalences}
}

@inproceedings{10.5555/646233.682379,
	author = {Ruzzo, Walter L.},
	title = {On the Complexity of General Context-Free Language Parsing and Recognition (Extended Abstract)},
	year = {1979},
	isbn = {3540095101},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	booktitle = {Proceedings of the 6th Colloquium, on Automata, Languages and Programming},
	pages = {489–497},
	numpages = {9}
}

@article{10.1016/j.tcs.2004.05.009,
	author = {Eisenbrand, Friedrich and Grandoni, Fabrizio},
	title = {On the Complexity of Fixed Parameter Clique and Dominating Set},
	year = {2004},
	issue_date = {20 October 2004},
	publisher = {Elsevier Science Publishers Ltd.},
	address = {GBR},
	volume = {326},
	number = {1–3},
	issn = {0304-3975},
	url = {https://doi.org/10.1016/j.tcs.2004.05.009},
	doi = {10.1016/j.tcs.2004.05.009},
	abstract = {We provide simple, faster algorithms for the detection of cliques and dominating sets
		of fixed order. Our algorithms are based on reductions to rectangular matrix multiplication.
		We also describe an improved algorithm for diamonds detection.},
	journal = {Theor. Comput. Sci.},
	month = oct,
	pages = {57–67},
	numpages = {11},
	keywords = {parameterized algorithms, dominating set, diamonds detection, clique}
}

@article{nevsetvril1985complexity,
	title={On the complexity of the subgraph problem},
	author={Ne{\v{s}}et{\v{r}}il, Jaroslav and Poljak, Svatopluk},
	journal={Commentationes Mathematicae Universitatis Carolinae},
	volume={26},
	number={2},
	pages={415--419},
	year={1985},
	publisher={Charles University in Prague, Faculty of Mathematics and Physics}
}

@article{chistikov2021subcubic,
	title={Subcubic Certificates for CFL Reachability},
	author={Chistikov, Dmitry and Majumdar, Rupak and Schepper, Philipp},
	journal={arXiv preprint arXiv:2102.13095},
	year={2021}
}

@article{10.1145/3158118,
	author = {Chatterjee, Krishnendu and Choudhary, Bhavya and Pavlogiannis, Andreas},
	title = {Optimal Dyck Reachability for Data-Dependence and Alias Analysis},
	year = {2017},
	issue_date = {January 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {2},
	number = {POPL},
	url = {https://doi.org/10.1145/3158118},
	doi = {10.1145/3158118},
	abstract = {A fundamental algorithmic problem at the heart of static analysis is Dyck reachability.
		The input is a graph where the edges are labeled with different types of opening and
		closing parentheses, and the reachability information is computed via paths whose
		parentheses are properly matched. We present new results for Dyck reachability problems
		with applications to alias analysis and data-dependence analysis. Our main contributions,
		that include improved upper bounds as well as lower bounds that establish optimality
		guarantees, are as follows: First, we consider Dyck reachability on bidirected graphs,
		which is the standard way of performing field-sensitive points-to analysis. Given
		a bidirected graph with n nodes and m edges, we present: (i)&nbsp;an algorithm with worst-case
		running time O(m + n · α(n)), where α(n) is the inverse Ackermann function, improving
		the previously known O(n2) time bound; (ii)&nbsp;a matching lower bound that shows that
		our algorithm is optimal wrt to worst-case complexity; and (iii)&nbsp;an optimal average-case
		upper bound of O(m) time, improving the previously known O(m · logn) bound. Second,
		we consider the problem of context-sensitive data-dependence analysis, where the task
		is to obtain analysis summaries of library code in the presence of callbacks. Our
		algorithm preprocesses libraries in almost linear time, after which the contribution
		of the library in the complexity of the client analysis is only linear, and only wrt
		the number of call sites. Third, we prove that combinatorial algorithms for Dyck reachability
		on general graphs with truly sub-cubic bounds cannot be obtained without obtaining
		sub-cubic combinatorial algorithms for Boolean Matrix Multiplication, which is a long-standing
		open problem. Thus we establish that the existing combinatorial algorithms for Dyck
		reachability are (conditionally) optimal for general graphs. We also show that the
		same hardness holds for graphs of constant treewidth. Finally, we provide a prototype
		implementation of our algorithms for both alias analysis and data-dependence analysis.
		Our experimental evaluation demonstrates that the new algorithms significantly outperform
		all existing methods on the two problems, over real-world benchmarks.},
	journal = {Proc. ACM Program. Lang.},
	month = dec,
	articleno = {30},
	numpages = {30},
	keywords = {Bidirected graphs, treewidth, CFL reachability, Data-dependence analysis, Dyck reachability}
}

@inbook{inbook,
	author = {Orachev, Egor and Epelbaum, Ilya and Azimov, Rustam and Grigorev, Semyon},
	year = {2020},
	month = {08},
	pages = {49-59},
	title = {Context-Free Path Querying by Kronecker Product},
	isbn = {978-3-030-54831-5},
	doi = {10.1007/978-3-030-54832-2_6}
}

@inproceedings{10.1109/FOCS.2014.53,
	author = {Abboud, Amir and Williams, Virginia Vassilevska},
	title = {Popular Conjectures Imply Strong Lower Bounds for Dynamic Problems},
	year = {2014},
	isbn = {9781479965175},
	publisher = {IEEE Computer Society},
	address = {USA},
	url = {https://doi.org/10.1109/FOCS.2014.53},
	doi = {10.1109/FOCS.2014.53},
	abstract = {We consider several well-studied problems in dynamic algorithms and prove that sufficient
		progress on any of them would imply a breakthrough on one of five major open problems
		in the theory of algorithms: 1) Is the 3SUM problem on n numbers in O(n2 -- \'{y}) time
		for some \'{y} &gt; 0__ __ 2) Can one determine the satisfiability of a CNF formula on n
		variables and poly n clauses in O((2 -- \'{y})npolyn) time for some \'{y} &gt; 0__ __ 3) Is the
		All Pairs Shortest Paths problem for graphs on n vertices in O(n3 -- \'{y}) time for some
		\'{y} &gt; 0__ __ 4) Is there a linear time algorithm that detects whether a given graph
		contains a triangle__ __ 5) Is there an O(n3 -- \'{y}) time combinatorial algorithm for
		n n Boolean matrix multiplication__ __ The problems we consider include dynamic versions
		of bipartite perfect matching, bipartite maximum weight matching, single source reachability,
		single source shortest paths, strong connectivity, subgraph connectivity, diameter
		approximation and some nongraph problems such as Pagh's problem defined in a recent
		paper by p\u{a}tra\c{s}cu [STOC 2010].},
	booktitle = {Proceedings of the 2014 IEEE 55th Annual Symposium on Foundations of Computer Science},
	pages = {434–443},
	numpages = {10},
	keywords = {3SUM, dynamic algorithms, lower bounds, all pairs shortest paths},
	series = {FOCS '14}
}

@inproceedings{bradford2017efficient,
	title={Efficient exact paths for Dyck and semi-Dyck labeled path reachability},
	author={Bradford, Phillip G},
	booktitle={2017 IEEE 8th Annual Ubiquitous Computing, Electronics and Mobile Communication Conference (UEMCON)},
	pages={247--253},
	year={2017},
	organization={IEEE}
}

@article{10.1145/3434315,
	author = {Mathiasen, Anders Alnor and Pavlogiannis, Andreas},
	title = {The Fine-Grained and Parallel Complexity of Andersen’s Pointer Analysis},
	year = {2021},
	issue_date = {January 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {5},
	number = {POPL},
	url = {https://doi.org/10.1145/3434315},
	doi = {10.1145/3434315},
	abstract = {Pointer analysis is one of the fundamental problems in static program analysis. Given
	a set of pointers, the task is to produce a useful over-approximation of the memory
	locations that each pointer may point-to at runtime. The most common formulation is
	Andersen’s Pointer Analysis (APA), defined as an inclusion-based set of m pointer
	constraints over a set of n pointers. Scalability is extremely important, as points-to
	information is a prerequisite to many other components in the static-analysis pipeline.
	Existing algorithms solve APA in O(n2· m) time, while it has been conjectured that
	the problem has no truly sub-cubic algorithm, with a proof so far having remained
	elusive. It is also well-known that APA can be solved in O(n2) time under certain
	sparsity conditions that hold naturally in some settings. Besides these simple bounds,
	the complexity of the problem has remained poorly understood. In this work we draw
	a rich fine-grained and parallel complexity landscape of APA, and present upper and
	lower bounds. First, we establish an O(n3) upper-bound for general APA, improving
	over O(n2· m) as n=O(m). Second, we show that even on-demand APA (“may a specific
	pointer a point to a specific location b?”) has an Ω(n3) (combinatorial) lower bound
	under standard complexity-theoretic hypotheses. This formally establishes the long-conjectured
	“cubic bottleneck” of APA, and shows that our O(n3)-time algorithm is optimal. Third,
	we show that under mild restrictions, APA is solvable in \~{O}(nω) time, where ω&lt;2.373
	is the matrix-multiplication exponent. It is believed that ω=2+o(1), in which case
	this bound becomes quadratic. Fourth, we show that even under such restrictions, even
	the on-demand problem has an Ω(n2) lower bound under standard complexity-theoretic
	hypotheses, and hence our algorithm is optimal when ω=2+o(1). Fifth, we study the
	parallelizability of APA and establish lower and upper bounds: (i) in general, the
	problem is P-complete and hence unlikely parallelizable, whereas (ii) under mild restrictions,
	the problem is parallelizable. Our theoretical treatment formalizes several insights
	that can lead to practical improvements in the future.},
	journal = {Proc. ACM Program. Lang.},
	month = jan,
	articleno = {34},
	numpages = {29},
	keywords = {fine-grained complexity, inclusion-based pointer analysis, Dyck reachability, static pointer analysis}
}