Замечание по тексту:
- не истина в последней инстанции
- есть ошибки и неточности
- разрешается импровизировать
- но должно все уложиться в 10 мин
- enjoy

1. (Совместное приветствие, далее Егор рассказывает)

*Приветствие
*Тема проекта
*Интерны
*Представить руководителя

2. (Егор рассказывает)

Рассмотрим граф в классическом его определении как сеть вершин связанных ориентированными ребрами с некоторыми метками. Представим, что кто-то задался вопросом, а находятся ли вершины А и Б на одном уровне иерархии. Или более формально, существует ли в графе путь вида Up^n Down^n или существуют ли в графе вершины, связанные с А таким путем.

Поскольку такие ограничения очевидно имеют контекстно свободную природу, существует такая проблема как CFPQ, или поиск путей в графе с ограничениями, выраженными КС грамматикой.

3. (Егор рассказывает)

Для понимания контекста, обратимся к теории формальных языков и графов. КС грамматика, это тройка объектов, где \Sigma множество терминалов, N множество нетерминалов или переменных, P множество продукций. Все множества конечны!!, что существенно. Язык, это все такие слова (цепочки терминалов) которые выводятся из стартового нетерминала. В этом определении мы опустили S, что не умоляет общности. 

Граф, состоит из множества вершин и ориентированных ребер, помеченных метками (тоже все множества конечны). 

Слово, образованное путем в графе, это, очевидно, конкатенация меток вдоль этого пути.

Тогда отношение достижимости, которое мы хотели бы построить в ходе работы CFPQ алгоритма, это все такие пары вершин, что найдется хотя бы один путь, связывающий их в L(G,A).

4. (Егор рассказывает)

Существует достаточное количество алгоритмов CFPQ, как матричных (работающих матрицами ЛА), так и основанных на техниках Парсинга, которые решают эту проблему (даже в более сильной постановке).

Однако большинство алгоритмов достаточно тяжеловесны для запросов в ослабленной постановке, когда запрос представляется всего лишь регулярным выражением.

Кроме того, эти алгоритмы требуют предварительную трансформацию входной грамматики в нормальную форму, что в общем случае, может привести к существенному ее разрастанию как в количестве нетерминалов, так и в количестве продукций, (что очевидно) плохо для производительности.

5. (Егор рассказывает)

Поэтому было принято решение разработать новый алгоритм, который не только бы работал с достаточно хорошим представлением грамматики, но также был выразим в терминах операций линейной алгебры, что упрощает реализацию и позволяет использовать современные математические библиотеки для вычисления как на CPU, так и на GPU. Кроме того, новый алгоритм также достаточно хорошо для запросов с регулярными ограничениями, и также позволяет извлекать не только информацию о достижимости, но и информацию о путях (почти за бесплатно)

6. (Егор рассказывает)

Задачи, которые я выполнил в ходе работы, это не только формализация алгоритма (его наивной версии) в терминах линейной алгебры с использование нулевой декомпозиции матриц, но и также подготовка текста статьи с описанием разработанного алгоритма на конференцию 2020 ACM SIGMOD, и подготовка LUBM фдатасета для тестирования алгоритма на поприще регулярных запросов.

7. (Илья рассказывает)

В процессе свой работы я выполнил следующие задачи: это разработка с использованием библиотеки PyGraphBASS как основного алгоритма определения достижимости/построения индекса, так и реализация алгоритма для извлечения путей между достижимыми вершинами, с использованиям ограничений на максимальное количество извлекаемых путей. Кроме этого, я осуществлял замеры реализации как построения индекса так и извлечения путей для CFPQ и RPQ запросов, для понимания общей картины работы алгоритма относительно его аналогов.


8. (Илья рассказывает)

В итоге, были выполнены все задачи по разработке и реализации алгоритма, также были получены весьма воодушевляющие результаты производительности относительно прямых аналогов. Все полученные результаты были оформлены в виде статьи для конференции. 2020 ACM SIGMOD.

9. (Илья рассказывает)

Однако предстоит еще много работы над разработанным алгоритмом, чтобы сделать его еще лучше. Это и исследование проблемы извлечения путей, и реализация на GPGPU для получения преимущест массово-параллельной архитектуры, и теоретическая доработка алгоритма для распределенного вычисления вычисления, а также интеграция уже существующего решения в одну из граммовых баз данных, например Redis.

10. (Илья рассказывает)

Работа над проектом ведется не в одиночку, а совместными усилиями целой группы энтузиастов, так что если возникнут вопросы, то можно со всеми нами связаться и обсудить это.

Спасибо за внимание.