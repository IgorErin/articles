== 1 =============

Hello. I'm Semyon form Saint-Petersburg state university. And I want to discuss steps which we should do to make context-free path querying practical.

== 2 =============

Context-free path querying is a partial case of a formal language path querying framework. Formal language constrained path queryes are a subclass of navigational queries. Suppose, one has a directed edge-labeled graph. One wants to find all vertices reachable from the vertex zero by a path with the following form: the path should start with a sequence of two edges, "a" and "b". The rest of the path is a sequence of edges "c" and "d" in arbitrary order. 

There are several such paths in the given graph. For example, this path from zero to three, or this path from zero to five. 

Formally, formal language constrained path querying with reachability semantics can be described as follows.
We should find all pairs of vertices connected by a path that forms a word from the specified language. The language can be of different formal classes. For example, it can be a regular language, like in our example. Regular path queries are well studied and widely adopted. More expressive class is context-free languages, which are a focus of our discussion. They are actively studied. Of course, there are other, much more expressive classes that wait to be studied.

Note, that one can vary not only language class, but also the details of a problem statement.

== 3 =============

So, the first question is where context-free path querying can be used for. Roughly speaking, CFPQ allows one to express different types of hierarchy analysis, that can not be expressed in terms of regular constraints. 

Since Mihalis Yannakakis introduced CFPQ, it was shown that CFPQ can be used in such areas of graph-structured data analysis as biological data analysis, data provenance analysis, and so on. 

At the same time, it was shown that CFPQ can be used for static code analysis. To do it one should extract a special graph from a program and formulate a query that describes a required type of analysis. 

Nowadays, graph databases tend to be a base for graph analysis systems in all these areas, but there is a number of obstacles to make CFPQ widely adopted in these and other areas.

== 4 =============

The first one is about CFPQ algorithms comparison. It is necessary to compare algorithms to answer a wide range of important queries. 

Unified benchmarks are a well-established solution, but nowadays, to our knowledge, there is only one attempt to compare different CFPQ algorithms. With conclusion which does not stimulate to adopt CPFQ.

Thus, we should create unified CFPQ benchmarks. We should take in mind that,  we should carefully collect cases and data from different areas, and prepare benchmarks for different cases and scenarios.

== 5 =============

A second obstacle is a small number of ready-to-use tools and systems with CFPQ support. So, even one can reduce a problem to CFPQ, there is no easy way to evaluate a solution. 

To move forward in this direction we should, first of all, develop benchmarks because they are necessary to choose an appropriate CFPQ algorithm. 

Secondly, we should establish query language features to express context-free constraints. I guess that graph query language standard should be a solution here. 

== 6 =============

We are working in both these directions. 

First of all, we developed and published a set of linear algebra based CFPQ algorithms. These implementations are based on the well-established library for sparse linear algebra.

Next, we provided full-stack support of CFPQ in the RedisGraph database. We extent both query language and query execution engine to provide a user-friendly platform for CFPQ evaluation.

And finally, we are working on dataset collecting. We collected a set of real-world graphs and queries from different areas of CFPQ application, unified these representation formats, and published them.  This step is still in progress: we should add more different graphs and queries, simplify dataset utilization workflow, and so on.

== 6 ==============

A bit more practical point of view on our results is presented in this slide. Here you can see some results of CFPQ algorithms evaluation on biological data and data for static code analysis.

First, we can see significant performance improvements of CFPQ in the last years. But a careful comparison of different algorithms is still hard and should be done in the near future.

For example, currently, we are working on a detailed evaluation of RedisGraph. We hope, it can be a practical solution for some cases of static code analysis.

== 7 ==============

Also, we are working on a detailed comparison of our linear algebra based algorithms and on developing of CFPQ algorithm for Neo4j. We hope, we can provide a reasonable solution for different scenarios of CFPQ.

Also, we are thinking about graph query language semantics and the usage of classes beyond context-free for constraints. 

== 8 ==============

Finally, I hope, I have shown that context-free path querying should be a part of graph analysis systems. Moreover, formal language constrained path querying should be a part of graph analysis systems. But it requires community attention and community effort.

As I know, it is planned to add RPQ benchmarks to LDBC benchmarks. I guess we should work on similar benchmarks for CFPQ. Moreover, I think, all formal language-related benchmarks should have a common infrastructure. So, it is a field for collaborative work.

Also, I guess, we should organize competitions of formal language constrained path querying algorithms. It is important to involve a static code analysis community in this competition.  

And the most nontrivial part is to provide support of formal language constraint path querying in graph databases. I think, that the support should not be limited by regular language. We should keep in mind other language classes when design graph query languages and query engines.

That's all. Thank you for your attention. I'm ready to answer your questions. 