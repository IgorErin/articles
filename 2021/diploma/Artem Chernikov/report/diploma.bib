\bibliographystyle{ugost2008ls}

@article{Georganas,
author =  {E. Georganas, A. Bulu\c{c}, J. Chapman},
title = {Parallel De Bruijn Graph Construction and Traversal for De Novo Genome Assembly},
language = {russian},
year = {2014},
issue_date = {Nov. 2014},
publisher = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
address = {New Orleans, LA, USA},
url = {https://crd.lbl.gov/assets/pubs_presos/sc14genome.pdf},
urldate = {2020-12-17},
abstract = {De novo whole genome assembly reconstructs genomic sequence from short, overlapping, and potentially erroneous fragments called reads. We study optimized parallelization of the most time-consuming phases of Meraculous, a state of-the-art production assembler. First, we present a new parallel algorithm for k-mer analysis, characterized by intensive communication and I/O requirements, and reduce the memory requirements by 6.93×. Second, we efficiently parallelize de Bruijn graph construction and traversal, which necessitates a distributed hash table and is a key component of most de novo assemblers. We provide a novel algorithm that leverages one-sided communication capabilities of the Unified Parallel C (UPC) to facilitate the requisite fine-grained parallelism and avoidance of data hazards, while analytically proving its scalability properties. Overall results show unprecedented performance and efficient scaling on up to 15,360 cores of a Cray XC30, on human genome as well as the challenging wheat genome, with performance improvement from days to seconds.}
}

@article{Riedy,
author =  {J. Riedy, D.A. Bader},
title = {Multithreaded Community Monitoring for Massive Streaming Graph Data},
language = {russian},
year = {2014},
issue_date = {May 24, 2014},
publisher = {7th Workshop on Multithreaded Architectures and Applications (MTAAP)},
address = {Boston, MA},
url = {http://lovesgoodfood.com/jason/cv/material/mtaap13-streaming-community-monitoring.pdf},
urldate = {2020-12-17},
abstract = {Analyzing static snapshots of massive, graph-structured data cannot keep pace with the growth of social networks, financial transactions, and other valuable data sources. Current state-ofthe-art industrial methods analyze these streaming sources using only simple, aggregate metrics. There are few existing scalable algorithms for monitoring complex global quantities like decomposition into community structure. Using our framework STING, we present the first known parallel algorithm specifically for monitoring communities in this massive, streaming, graph-structured data. Our algorithm performs incremental re-agglomeration rather than starting from scratch after each batch of changes, reducing the problem’s size to that of the change rather than the entire graph. We analyze our initial implementation’s performance on multithreaded platforms for execution time and latency. On an Intel-based multithreaded platform, our algorithm handles up to 100 million updates per second on social networks with one to 30 million edges, providing a speed-up from 4× to 3700× over statically recomputing the decomposition after each batch of changes. Possibly because of our artificial graph generator, resulting communities’ modularity varies little from the initial graph.}
}

@article{Bergamini,
author =  {E. Bergamini, H. Meyerhenke},
title = {Approximating Betweenness Centrality in Fully-dynamic Networks},
language = {russian},
year = {2016},
issue_date = {May 24, 2016},
publisher = {Accepted by Internet Mathematics},
url = {https://arxiv.org/pdf/1510.07971.pdf},
urldate = {2020-12-17},
abstract = {Betweenness is a well-known centrality measure that ranks the nodes of a network according to their participation in shortest paths. Because exact computations are prohibitive in large networks, several approximation algorithms have been proposed. Besides that, recent years have seen the publication of dynamic algorithms for efficient recomputation of betweenness in networks that change over time.

In this article, we propose the first betweenness centrality approximation algorithms with a provable guarantee on the maximum approximation error for dynamic networks. Several new intermediate algorithmic results contribute to the respective approximation algorithms: (i) new upper bounds on the vertex diameter, (ii) the first fully dynamic algorithm for updating an approximation of the vertex diameter in undirected graphs, and (iii) an algorithm with lower time complexity for updating single-source shortest paths in unweighted graphs after a batch of edge actions.

Using approximation, our algorithms are the first to make in-memory computation of betweenness in dynamic networks with millions of edges feasible. Our experiments show that our algorithms can achieve substantial speedups compared to recomputation, up to several orders of magnitude. Moreover, the approximation accuracy is usually significantly better than the theoretical guarantee in terms of absolute error. More importantly, for reasonably small approximation error thresholds, the rank of nodes is well preserved, in particular for nodes with high betweenness.}
}

@article{Ediger,
author =  {D. Ediger, R. McColl, J. Riedy},
title = {STINGER: High Performance Data Structure for Streaming Graphs},
language = {russian},
year = {2012},
issue_date = {Sept. 2012},
publisher = {The IEEE High Performance Extreme Computing Conference (HPEC)},
address = {Waltham, MA},
url = {http://lovesgoodfood.com/jason/CV/material/hpec12-stinger.pdf},
urldate = {2020-12-17},
abstract = {The current research focus on "big data" problems highlights the scale and complexity of analytics required and the high rate at which data may be changing. In this paper, we present our high performance, scalable and portable software, Spatio-Temporal Interaction Networks and Graphs Extensible Representation (STINGER), that includes a graph data structure that enables these applications. Key attributes of STINGER are fast insertions, deletions, and updates on semantic graphs with skewed degree distributions. We demonstrate a process of algorithmic and architectural optimizations that enable high performance on the Cray XMT family and Intel multicore servers. Our implementation of STINGER on the Cray XMT processes over 3 million updates per second on a scale-free graph with 537 million edges.}
}

@article{Azad,
author =  {A. Azad, G. Ballard, A. Bulu\c{c}},
title = {Exploiting Multiple Levels of Parallelism in Sparse Matrix-Matrix Multiplication},
language = {russian},
year = {2016},
issue_date = {Nov. 8, 2016},
publisher = {SIAM Journal on Scientific Computing},
url = {https://arxiv.org/pdf/1510.00844.pdf},
urldate = {2020-12-17},
abstract = {Sparse matrix-matrix multiplication (or SpGEMM) is a key primitive for many high-performance graph algorithms as well as for some linear solvers, such as algebraic multigrid. The scaling of existing parallel implementations of SpGEMM is heavily bound by communication. Even though 3D (or 2.5D) algorithms have been proposed and theoretically analyzed in the flat MPI model on Erd˝os-R´enyi matrices, those algorithms had not been implemented in practice and their complexities had not been analyzed for the general case. In this work, we present the first implementation of the 3D SpGEMM formulation that exploits multiple (intra-node and inter-node) levels of parallelism, achieving significant speedups over the state-of-the-art publicly available codes at all levels of concurrencies. We extensively evaluate our implementation and identify bottlenecks that should be subject to further research.}
}

@article{Konig,
author =  {D. Konig},
title = {Graphen und Matrizen (Graphs and Matrices)},
language = {russian},
year = {1931}
}

@article{Harary,
author =  {F. Harary},
title = {Graph Theory},
language = {russian},
year = {1969}
}

@book{Kepner,
author = {J. Kepner, J. Gilbert},
title = {Graph Algorithms in the Language of Linear Algebra},
language = {russian},
year = {2011},
publisher = {SIAM Press},
address = {Philadelphia, PA},
url = {https://epubs.siam.org/doi/pdf/10.1137/1.9780898719918.fm},
urldate = {2020-12-17}
}

@article{Mattson,
author =  {T. Mattson},
title = {Workshop on Graph Algorithms Building Blocks},
language = {russian},
year = {2016},
publisher = {IPDPS},
address = {Chicago, IL},
urldate = {2020-12-17}
}

@article{Zhang,
author =  {P. Zhang, M. Zalewski, A. Lumsdaine},
title = {GBTL-CUDA: Graph Algorithms and Primitives for GPUs},
language = {russian},
year = {2016},
publisher = {IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
address = {Bloomington, IN},
url = {https://resources.sei.cmu.edu/asset_files/ConferencePaper/2016_021_001_507186.pdf},
urldate = {2020-12-17},
abstract = {GraphBLAS is an emerging paradigm for graph computation that makes it easy to program new graph algorithms in a highly abstract language of linear algebra. The promise of GraphBLAS is that an abstract graph program will execute in a wide variety of programming environments, ranging from embedded environments to distributed memory computers. In this paper we present our initial implementation of GraphBLAS primitives for graphics processing unit (GPU) systems called GraphBLAS Template Library (GBTL). Our implementation is an ongoing effort in the context of GraphBLAS standardization efforts by a diverse group of academics and representatives of the industry. Our implementation consists of a high-level C++ frontend, and the GPU functionality is implemented with a combination of the CUSP library for sparse-matrix computation on GPU and the NVIDIA Thrust framework for abstract GPU programs. We give initial performance results of our implementations, and we discuss solutions to the problems we encountered when providing a low-level implementation for a high-level generic interface.}
}

@article{OdedGreen,
author = {O. Green, R. McColl, A. Bader},
title = {GPU Merge Path - A GPU Merging Algorithm},
language = {russian},
year = {November 2014},
publisher = {International Conference on Supercomputing},
url = {https://www.researchgate.net/publication/254462662_GPU_merge_path_a_GPU_merging_algorithm},
urldate = {2021-06-08}
}

@article{DavidTimothy,
author = {David Timothy A., Hu Yifan},
title = {The university of Florida sparse matrix collection},
language = {russian},
year = {November 2011},
publisher = {ACM Transactions on Mathematical Software},
url = {https://dl.acm.org/doi/10.1145/2049662.2049663},
urldate = {2021-11-11}
}

@article{GraphBLAST,
author = {C. Yang, A. Bulu\c{c}, John D. Owens},
title = {GraphBLAST: A High-Performance Linear Algebra-based
Graph Framework on the GPU},
language = {russian},
year = {January 2021},
publisher = {ACM Transactions on Mathematical Software},
url = {https://arxiv.org/pdf/1908.01407.pdf},
urldate = {2021-11-11}
}