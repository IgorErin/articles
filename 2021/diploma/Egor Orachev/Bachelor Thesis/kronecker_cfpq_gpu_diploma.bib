@book{saturday_is_monday,
  author    = "Стругацкий, А.Н. and Стругацкий, Б.Н.",
  title     = "Понедельник начинается в субботу",
  address   = "М.",
  editor    = "Иванов",
  publisher = "Детская литература",
  year      = 1965,
  language  = "russian"
}
@book{book:fourier,
  title      = {Ряды и интеграл Фурье: Теория поля. Аналитические и специальные функции. Преобразование Лапласа},
  author     = {Кожевников, Н.И. and Краснощекова, Т.И. and Шишкин, Н.Е.},
  lccn       = {66051327},
  series     = {Избранные главы высшей математики для инженеров и студентов втузов. Задачи и упражнения},
  url        = {http://books.google.ru/books?id=xvXuAAAAMAAJ},
  year       = {1964},
  publisher  = {Наука},
  eprint     = {http://books.google.ru/books?id=xvXuAAAAMAAJ},
  eprinttype = {Google Books}
}
@online{wiki:lcd,
  author       = "Wikipedia",
  title        = "Наибольший общий делитель",
  howpublished = "Википедия, свободная энциклопедия",
  year         = 2012,
  url          = {http://goo.gl/1eEF3},
  urldate      = "08.04.2013",
  language     = "russian"
}

% Graph data model application
@inproceedings{article:querying_graph_databases,
    author = {Barcel\'{o} Baeza, Pablo},
    title = {Querying Graph Databases},
    year = {2013},
    isbn = {9781450320665},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2463664.2465216},
    doi = {10.1145/2463664.2465216},
    abstract = {Graph databases have gained renewed interest in the last years, due to its applications in areas such as the Semantic Web and Social Networks Analysis. We study the problem of querying graph databases, and, in particular, the expressiveness and complexity of evaluation for several general-purpose query languages, such as the regular path queries and its extensions with conjunctions and inverses. We distinguish between two semantics for these languages. The first one, based on simple paths, easily leads to intractability, while the second one, based on arbitrary paths, allows tractable evaluation for an expressive family of languages.We also study two recent extensions of these languages that have been motivated by modern applications of graph databases. The first one allows to treat paths as first-class citizens, while the second one permits to express queries that combine the topology of the graph with its underlying data.},
    booktitle = {Proceedings of the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems},
    pages = {175–188},
    numpages = {14},
    keywords = {query evaluation, conjunctive regular path queries, containment, graph databases, expressiveness},
    location = {New York, New York, USA},
    series = {PODS '13}
}

% Graph data model application (also cfpq on rdf example)
@article{article:cfpq_and_rdf_analysis,
    author    = {Xiaowang Zhang and
               Zhiyong Feng and
               Xin Wang and
               Guozheng Rao and
               Wenrui Wu},
    title     = {Context-Free Path Queries on {RDF} Graphs},
    journal   = {CoRR},
    volume    = {abs/1506.00743},
    year      = {2015},
    url       = {http://arxiv.org/abs/1506.00743},
    archivePrefix = {arXiv},
    eprint    = {1506.00743},
    timestamp = {Fri, 20 Mar 2020 11:46:30 +0100},
    biburl    = {https://dblp.org/rec/journals/corr/ZhangFWR15.bib},
    bibsource = {dblp computer science bibliography, https://dblp.org}
}

% Graph data model application
@article{article:rna_prediction,
    author = {Anderson, James and Novák, Adám and Sükösd, Zsuzsanna and Golden, Michael and Arunapuram, Preeti and Edvardsson, Ingolfur and Hein, Jotun},
    year = {2013},
    month = {05},
    pages = {149},
    title = {Quantifying variances in comparative RNA secondary structure prediction},
    volume = {14},
    journal = {BMC bioinformatics},
    doi = {10.1186/1471-2105-14-149}
}

% Graph data model application
@article{article:dyck_cfl_code_analysis,
    author = {Zhang, Qirun and Lyu, Michael R. and Yuan, Hao and Su, Zhendong},
    title = {Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis},
    year = {2013},
    issue_date = {June 2013},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {48},
    number = {6},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2499370.2462159},
    doi = {10.1145/2499370.2462159},
    abstract = {The context-free language (CFL) reachability problem is a well-known fundamental formulation in program analysis. In practice, many program analyses, especially pointer analyses, adopt a restricted version of CFL-reachability, Dyck-CFL-reachability, and compute on edge-labeled bidirected graphs. Solving the all-pairs Dyck-CFL-reachability on such bidirected graphs is expensive. For a bidirected graph with n nodes and m edges, the traditional dynamic programming style algorithm exhibits a subcubic time complexity for the Dyck language with k kinds of parentheses. When the underlying graphs are restricted to bidirected trees, an algorithm with O(n log n log k) time complexity was proposed recently. This paper studies the Dyck-CFL-reachability problems on bidirected trees and graphs. In particular, it presents two fast algorithms with O(n) and O(n + m log m) time complexities on trees and graphs respectively. We have implemented and evaluated our algorithms on a state-of-the-art alias analysis for Java. Results on standard benchmarks show that our algorithms achieve orders of magnitude speedup and consume less memory.},
    journal = {SIGPLAN Not.},
    month = jun,
    pages = {435–446},
    numpages = {12},
    keywords = {alias analysis, dyck-cfl-reachability}
}

% Graph databases overview
@inbook{inbook:databases_intro,
    author = {Abiteboul, Serge and Hull, Richard and Vianu, Victor},
    year = {1995},
    month = {01},
    pages = {},
    title = {Foundations of Databases},
    isbn = {0-201-53771-0}
}

% Cfpq example
@article{article:hellings_cfpq,
    author = {Hellings, Jelle},
    year = {2015},
    month = {02},
    pages = {},
    title = {Path Results for Context-free Grammar Queries on Graphs}
}

% Cfpq (relational semantic introduction)
@inproceedings{article:hellings2014conjunctive,
  doi = {10.5441/002/ICDT.2014.15},
  url = {https://openproceedings.org/ICDT/2014/paper_34.pdf},
  author = {Hellings,  Jelle},
  keywords = {Database Theory,  Database Technology},
  language = {eng},
  title = {Conjunctive Context-Free Path Queries},
  publisher = {OpenProceedings.org},
  year = {2014}
}

% Cfpq example
@inproceedings{inproceedings:matrix_cfpq,
    author = {Azimov, Rustam and Grigorev, Semyon},
    year = {2018},
    month = {06},
    pages = {1-10},
    title = {Context-free path querying by matrix multiplication},
    doi = {10.1145/3210259.3210264}
}

% Cfpq example
@inbook{inbook:kronecker_cfpq_adbis,
    author = {Orachev, Egor and Epelbaum, Ilya and Azimov, Rustam and Grigorev, Semyon},
    year = {2020},
    month = {08},
    pages = {49-59},
    title = {Context-Free Path Querying by Kronecker Product},
    isbn = {978-3-030-54831-5},
    doi = {10.1007/978-3-030-54832-2_6}
}

% Cfpq example
@article{article:cfpq_go_for_rdf,
    author = {Medeiros, Ciro and Musicante, Martin and Costa, Umberto},
    year = {2020},
    month = {04},
    pages = {},
    title = {An Algorithm for Context-Free Path Queries over Graph Databases}
}

% 2019 matrix-algo evaluatoion for dense CUDA matrices
@inproceedings{inproceedings:cfpq_matrix_evaluation,
    author = {Mishin, Nikita and Sokolov, Iaroslav and Spirin, Egor and Kutuev, Vladimir and Nemchinov, Egor and Gorbatyuk, Sergey and Grigorev, Semyon},
    year = {2019},
    month = {06},
    pages = {1-5},
    title = {Evaluation of the Context-Free Path Querying Algorithm Based on Matrix Multiplication},
    doi = {10.1145/3327964.3328503}
}

% SpGEMM for NVIDIA CUDA
@inproceedings{inproceedings:spgemm_mem_saving_for_nvidia,
    author = {Nagasaka, Yusuke and Nukada, Akira and Matsuoka, Satoshi},
    year = {2017},
    month = {08},
    pages = {101-110},
    title = {High-Performance and Memory-Saving Sparse General Matrix-Matrix Multiplication for NVIDIA Pascal GPU},
    doi = {10.1109/ICPP.2017.19}
}

% Most recent single source matrix-algo implementation with CUDA support
@inproceedings{inproceedings:cfqp_matrix_with_single_source,
    author = {Terekhov, Arseniy and Khoroshev, Artyom and Azimov, Rustam and Grigorev, Semyon},
    year = {2020},
    month = {06},
    pages = {1-12},
    title = {Context-Free Path Querying with Single-Path Semantics by Matrix Multiplication},
    doi = {10.1145/3398682.3399163}
}

% Recursive state machines formalizm introduction
@article{article:recursive_state_machines,
    author = {Alur, Rajeev and Benedikt, Michael and Etessami, Kousha and Godefroid, Patrice and Reps, Thomas and Yannakakis, Mihalis},
    title = {Analysis of Recursive State Machines},
    year = {2005},
    issue_date = {July 2005},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {27},
    number = {4},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/1075382.1075387},
    doi = {10.1145/1075382.1075387},
    abstract = {Recursive state machines (RSMs) enhance the power of ordinary state machines by allowing vertices to correspond either to ordinary states or to potentially recursive invocations of other state machines. RSMs can model the control flow in sequential imperative programs containing recursive procedure calls. They can be viewed as a visual notation extending Statecharts-like hierarchical state machines, where concurrency is disallowed but recursion is allowed. They are also related to various models of pushdown systems studied in the verification and program analysis communities.After introducing RSMs and comparing their expressiveness with other models, we focus on whether verification can be efficiently performed for RSMs. Our first goal is to examine the verification of linear time properties of RSMs. We begin this study by dealing with two key components for algorithmic analysis and model checking, namely, reachability (Is a target state reachable from initial states?) and cycle detection (Is there a reachable cycle containing an accepting state?). We show that both these problems can be solved in time O(nθ2) and space O(nθ), where n is the size of the recursive machine and θ is the maximum, over all component state machines, of the minimum of the number of entries and the number of exits of each component. From this, we easily derive algorithms for linear time temporal logic model checking with the same complexity in the model. We then turn to properties in the branching time logic CTL*, and again demonstrate a bound linear in the size of the state machine, but only for the case of RSMs with a single exit node.},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = jul,
    pages = {786–818},
    numpages = {33},
    keywords = {pushdown automata, Software verification, recursive state machines, temporal logic, model checking, program analysis, context-free languages}
}

% Hopcroft formal languages theory
@book{book:automata_theory,
    author = {Hopcroft, John E. and Motwani, Rajeev and Ullman, Jeffrey D.},
    title = {Introduction to Automata Theory, Languages, and Computation (3rd Edition)},
    year = {2006},
    isbn = {0321455363},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {USA}
}

% Cfpq implementations becnch for Neo4j database
@inproceedings{article:kuijpers_cfpq_exp_compare,
    author = {Kuijpers, Jochem and Fletcher, George and Yakovets, Nikolay and Lindaaker, Tobias},
    title = {An Experimental Study of Context-Free Path Query Evaluation Methods},
    booktitle = {Proceedings of the 31st International Conference on Scientific and Statistical Database Management},
    series = {SSDBM '19},
    year = {2019},
    isbn = {978-1-4503-6216-0},
    location = {Santa Cruz, CA, USA},
    pages = {121--132},
    numpages = {12},
    url = {http://doi.acm.org/10.1145/3335783.3335791},
    doi = {10.1145/3335783.3335791},
    acmid = {3335791},
    publisher = {ACM},
    address = {New York, NY, USA},
} 

% First introduction of cfpq problem
@inproceedings{inproceedings:yannakakis_cfpq_problem,
    author = {Yannakakis, Mihalis},
    title = {Graph-Theoretic Methods in Database Theory},
    year = {1990},
    isbn = {0897913523},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/298514.298576},
    doi = {10.1145/298514.298576},
    booktitle = {Proceedings of the Ninth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems},
    pages = {230–242},
    numpages = {13},
    location = {Nashville, Tennessee, USA},
    series = {PODS '90}
}

% Cfpq algo based on LR analysis (from 2019 Kujipers comp)
@inbook{inbook:santos_cfpq_lr_analysis,
    author = {Santos, Fred and Costa, Umberto and Musicante, Martin},
    year = {2018},
    month = {01},
    pages = {225-233},
    title = {A Bottom-Up Algorithm for Answering Context-Free Path Queries in Graph Databases},
    isbn = {978-3-319-91661-3},
    doi = {10.1007/978-3-319-91662-0_17}
}

% Simple rpq arrival algo for graph networks
@inproceedings{10.1145/3299869.3319882,
    author = {Wadhwa, Sarisht and Prasad, Anagh and Ranu, Sayan and Bagchi, Amitabha and Bedathur, Srikanta},
    title = {Efficiently Answering Regular Simple Path Queries on Large Labeled Networks},
    year = {2019},
    isbn = {9781450356435},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3299869.3319882},
    doi = {10.1145/3299869.3319882},
    abstract = {A fundamental query in labeled graphs is to determine if there exists a path between a given source and target vertices, such that the path satisfies a given label constraint. One of the powerful forms of specifying label constraints is through regular expressions, and the resulting problem of reachability queries under regular simple paths (RSP) form the core of many practical graph query languages such as SPARQL from W3C, Cypher of Neo4J, Oracle's PGQL and LDBC's G-CORE. Despite its importance, since it is known that answering RSP queries is NP-Hard, there are no scalable and practical solutions for answering reachability with full-range of regular expressions as constraints. In this paper, we circumvent this computational bottleneck by designing a random-walk based sampling algorithm called ARRIVAL, which is backed by theoretical guarantees on its expected quality. Extensive experiments on billion-sized real graph datasets with thousands of labels show that ARRIVAL to be 100 times faster than baseline strategies with an average accuracy of 95%.},
    booktitle = {Proceedings of the 2019 International Conference on Management of Data},
    pages = {1463–1480},
    numpages = {18},
    keywords = {random walks, regular path query, knowledge graphs, regular expression, reachability query},
    location = {Amsterdam, Netherlands},
    series = {SIGMOD '19}
}

% RDF RPQ for Glushkov automata
@article{article:provenance_aware_rpq,
    author = {Wang, Xin and Wang, Simiao and Xin, Yueqi and Yang, Yajun and Li, Jianxin and Wang, Xiaofei},
    year = {2020},
    month = {05},
    pages = {},
    title = {Distributed Pregel-based provenance-aware regular path query processing on RDF knowledge graphs},
    volume = {23},
    journal = {World Wide Web},
    doi = {10.1007/s11280-019-00739-0}
}

% SuiteSparse for solving graph problems
@article{article:suite_sparse_for_graph_problems,
    author = {Davis, Timothy A.},
    title = {Algorithm 1000: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},
    year = {2019},
    issue_date = {December 2019},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {45},
    number = {4},
    issn = {0098-3500},
    url = {https://doi.org/10.1145/3322125},
    doi = {10.1145/3322125},
    abstract = {SuiteSparse:GraphBLAS is a full implementation of the GraphBLAS standard, which defines a set of sparse matrix operations on an extended algebra of semirings using an almost unlimited variety of operators and types. When applied to sparse adjacency matrices, these algebraic operations are equivalent to computations on graphs. GraphBLAS provides a powerful and expressive framework for creating graph algorithms based on the elegant mathematics of sparse matrix operations on a semiring. An overview of the GraphBLAS specification is given, followed by a description of the key features and performance of its implementation in the SuiteSparse:GraphBLAS package.},
    journal = {ACM Trans. Math. Softw.},
    month = dec,
    articleno = {44},
    numpages = {25},
    keywords = {Graph algorithms, GraphBLAS, sparse matrices}
}

% cuSPARSE reference
@MISC{net:cusparse_docs,
  title = {Sparse  matrix  library  (in  Cuda)},
  url = {https://docs.nvidia.com/cuda/cusparse/},
  urldate      = "16.04.2021",
  language     = "english"
}

% bhSPARSE
@article{10.1016/j.jpdc.2015.06.010,
 author = {Liu, Weifeng and Vinter, Brian},
 title = {A Framework for General Sparse Matrix-Matrix Multiplication on GPUs and Heterogeneous Processors},
 year = {2015},
 issue_date = {November 2015},
 publisher = {Academic Press, Inc.},
 address = {USA},
 volume = {85},
 number = {C},
 issn = {0743-7315},
 url = {https://doi.org/10.1016/j.jpdc.2015.06.010},
 doi = {10.1016/j.jpdc.2015.06.010},
 abstract = {General sparse matrix-matrix multiplication (SpGEMM) is a fundamental building block for numerous applications such as algebraic multigrid method (AMG), breadth first search and shortest path problem. Compared to other sparse BLAS routines, an efficient parallel SpGEMM implementation has to handle extra irregularity from three aspects: (1) the number of nonzero entries in the resulting sparse matrix is unknown in advance, (2) very expensive parallel insert operations at random positions in the resulting sparse matrix dominate the execution time, and (3) load balancing must account for sparse data in both input matrices.In this work we propose a framework for SpGEMM on GPUs and emerging CPU-GPU heterogeneous processors. This framework particularly focuses on the above three problems. Memory pre-allocation for the resulting matrix is organized by a hybrid method that saves a large amount of global memory space and efficiently utilizes the very limited on-chip scratchpad memory. Parallel insert operations of the nonzero entries are implemented through the GPU merge path algorithm that is experimentally found to be the fastest GPU merge approach. Load balancing builds on the number of necessary arithmetic operations on the nonzero entries and is guaranteed in all stages.Compared with the state-of-the-art CPU and GPU SpGEMM methods, our approach delivers excellent absolute performance and relative speedups on various benchmarks multiplying matrices with diverse sparsity structures. Furthermore, on heterogeneous processors, our SpGEMM approach achieves higher throughput by using re-allocatable shared virtual memory. We design a framework for SpGEMM on modern manycore processors using the CSR format.We present a hybrid method for pre-allocating the resulting sparse matrix.We propose an efficient parallel insert method for long rows of the resulting matrix.We develop a heuristic-based load balancing strategy.Our approach significantly outperforms other known CPU and GPU SpGEMM methods.},
 journal = {J. Parallel Distrib. Comput.},
 month = nov,
 pages = {47--61},
 numpages = {15},
 keywords = {Linear algebra, Sparse matrix, Sparse matrix-matrix multiplication, Heterogeneous processor, GPU, Merging, Parallel algorithm}
}

% Graphblast
@article{yang2019graphblast,
  title = {{GraphBLAST}: A High-Performance Linear Algebra-based Graph Framework on the {GPU}},
  author = {Carl Yang and Ayd{\i}n Bulu{\c{c}} and John D. Owens},
  year = {2019},
  journal = {arXiv preprint},
  arxiv = {https://arxiv.org/abs/1908.01407}
}

% Cusplibrary project
@MISC{net:cusplibrary,
  author = "Steven Dalton and Nathan Bell and Luke Olson and Michael Garland",
  title = "Cusp: Generic Parallel Algorithms for Sparse Matrix and Graph Computations",
  year = "2014",
  url = "http://cusplibrary.github.io/",
  note = "Version 0.5.0"
}

% clSPARSE project
@inproceedings{10.1145/2909437.2909442,
author = {Greathouse, Joseph L. and Knox, Kent and Po\l{}a, Jakub and Varaganti, Kiran and Daga, Mayank},
title = {ClSPARSE: A Vendor-Optimized Open-Source Sparse BLAS Library},
year = {2016},
isbn = {9781450343381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2909437.2909442},
doi = {10.1145/2909437.2909442},
abstract = {Sparse linear algebra is a cornerstone of modern computational science. These algorithms ignore the zero-valued entries found in many domains in order to work on much larger problems at much faster rates than dense algorithms. Nonetheless, optimizing these algorithms is not straightforward. Highly optimized algorithms for multiplying a sparse matrix by a dense vector, for instance, are the subject of a vast corpus of research and can be hundreds of times longer than na\"{\i}ve implementations. Optimized sparse linear algebra libraries are thus needed so that users can build applications without enormous effort.Hardware vendors release proprietary libraries that are highly optimized for their devices, but they limit interoperability and promote vendor lock-in. Open libraries often work across multiple devices and can quickly take advantage of new innovations, but they may not reach peak performance. The goal of this work is to provide a sparse linear algebra library that offers both of these advantages.We thus describe clSPARSE, a permissively licensed open-source sparse linear algebra library that offers state-of-the-art optimized algorithms implemented in OpenCL™. We test clSPARSE on GPUs from AMD and Nvidia and show performance benefits over both the proprietary cuSPARSE library and the open-source ViennaCL library.},
booktitle = {Proceedings of the 4th International Workshop on OpenCL},
articleno = {7},
numpages = {4},
keywords = {GPGPU, OpenCL, Sparse Linear Algebra, clSPARSE},
location = {Vienna, Austria},
series = {IWOCL '16}
}

% Cfpq Py Algo
@online{net:cfpq_py_algo,
    title      = "A collection of CFPQ algorithms implemented in PyGraphBLAS",
    howpublished = "Github",
    year       = 2020,
    url        = {https://github.com/JetBrains-Research/CFPQ_PyAlgo},
    urldate    = "16.12.2020",
    language   = "english"
} 

% Cfpq Data
@online{net:cfpq_data,
    title      = "Graphs and grammars for Context-Free Path Querying algorithms evaluation",
    howpublished = "Github",
    year       = 2021,
    url        = {https://github.com/JetBrains-Research/CFPQ_Data},
    urldate    = "11.03.2021",
    language   = "english"
} 
% Cuda toolkit reference
@online{net:cuda_toolkit_docs,
    author       = "NVIDIA",
    title        = "CUDA Toolkit Documentation",
    howpublished = "NVIDIA Developer Zone",
    year         = 2020,
    url          = {https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html},
    urldate      = "01.12.2020",
    language     = "english"
}

% Cuda toolkit reference
@online{net:cuda_thrust,
    author       = "NVIDIA",
    title        = "CUDA Thrust",
    howpublished = "NVIDIA Developer Zone",
    year         = 2020,
    url          = {https://docs.nvidia.com/cuda/thrust/index.html},
    urldate      = "16.12.2020",
    language     = "english"
}

% OpenCL API spec reference
@online{net:spec_opencl,
    title      = "OpenCL: Open Standard for Parallel Programming of Heterogeneous Systems",
    howpublished = "Khronos website",
    year       = 2020,
    url        = {https://www.khronos.org/opencl/},
    urldate    = "08.12.2020",
    language   = "english"
} 

% Suite-Sparse refernece
@online{net:suite_sparse,
    author       = "Dr. Timothy Alden, Davis",
    title        = "SuiteSparse: a suite of sparse matrix software",
    howpublished = "SuiteSparse website",
    year         = 2020,
    url          = {https://people.engr.tamu.edu/davis/suitesparse.html},
    urldate      = "08.12.2020",
    language     = "english"
}

% Vulkan API spec reference
@online{net:spec_vulkan,
    title      = "Vulkan 1.1 API Specification",
    author     = "Khronos Working Group The",
    howpublished = "Khronos Registry",
    year       = 2019,
    url        = {https://www.khronos.org/registry/vulkan/specs/1.1/html/vkspec.html},
    urldate    = "08.12.2020",
    language   = "english"
}     

% OpenGL API spec reference
@online{net:spec_opengl,
    title      = "OpenGL 4.4 Specification",
    author     = "Khronos Working Group The",
    howpublished = "Khronos Registry",
    year       = 2014,
    url        = {https://www.khronos.org/registry/OpenGL/specs/gl/glspec44.core.pdf},
    urldate    = "08.12.2020",
    language   = "english"
} 

% Direct3D API spec reference
@online{net:spec_direct3d,
    title      = "Direct3D 12 Graphics",
    howpublished = "Microsoft Online Documents",
    year       = 2018,
    url        = {https://docs.microsoft.com/ru-ru/windows/win32/direct3d12/direct3d-12-graphics?redirectedfrom=MSDN},
    urldate    = "08.12.2020",
    language   = "english"
} 

% Graphblas
@online{net:graphblas,
    title      = "GraphBLAS Graph Linear Algebra API",
    howpublished = "graphblas",
    year       = 2020,
    url        = {https://graphblas.github.io/},
    urldate    = "09.12.2020",
    language   = "english"
} 

@INPROCEEDINGS{paper:redisgraph,
  author={P. {Cailliau} and T. {Davis} and V. {Gadepally} and J. {Kepner} and R. {Lipman} and J. {Lovitz} and K. {Ouaknine}},
  booktitle={2019 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)}, 
  title={RedisGraph GraphBLAS Enabled Graph Database}, 
  year={2019},
  volume={},
  number={},
  pages={285-286},
  doi={10.1109/IPDPSW.2019.00054}
 }


@INPROCEEDINGS{paper:graphblas_foundations,
author={J. {Kepner} and P. {Aaltonen} and D. {Bader} and A. {Buluc} and F. {Franchetti} and J. {Gilbert} and D. {Hutchison} and M. {Kumar} and A. {Lumsdaine} and H. {Meyerhenke} and S. {McMillan} and C. {Yang} and J. D. {Owens} and M. {Zalewski} and T. {Mattson} and J. {Moreira}},
booktitle={2016 IEEE High Performance Extreme Computing Conference (HPEC)},
title={Mathematical foundations of the GraphBLAS},
year={2016},
volume={},
number={},
pages={1--9},
keywords={graph theory;mathematics computing;matrix algebra;programming environments;mathematical foundations;GraphBLAS standard;GraphBlas.org;matrix-based graph algorithms;matrix-based graph operations;programming environments;adjacency matrices;incidence matrices;matrix multiplication;matrix mathematics;Matrices;Sparse matrices;Finite element analysis;Standards;Additives},
doi={10.1109/HPEC.2016.7761646},
ISSN={},
month={Sep.},}


% Solution repository (cuBool library)
@online{net:cubool_project,
    title      = "cuBool: sparse linera Boolean algebra for NVIDIA CUDA",
    howpublished = "Github",
    year       = 2020,
    url        = {https://github.com/JetBrains-Research/cuBool},
    urldate    = "08.12.2020",
    language   = "english"
} 

% Solution ref (cuBool)
@online{net:cuBool,
  author = {Orachyov, Egor and Alimov, Pavel and Grigorev, Semyon},
  title = {cuBool: sparse Boolean linear algebra for Nvidia Cuda},
  year = 2020,
  url = {https://github.com/JetBrains-Research/cuBool},
  urldata = "11.03.2021",
  note = {Version Alpha}
}

% Sparse matrix data
@online{net:sp_matrix_data_florida,
    title       = "T. Davis. The SuiteSparse Matrix Collection (the University of Florida Sparse Matrix Collection)",
    year       = 2020,
    url        = {https://sparse.tamu.edu},
    urldate    = "09.03.2021",
    language   = "english"
}
    
% Alias analysis
@article{Zheng:2008:DAA:1328897.1328464,
 author = {Zheng, Xin and Rugina, Radu},
 title = {Demand-driven Alias Analysis for C},
 journal = {SIGPLAN Not.},
 issue_date = {January 2008},
 volume = {43},
 number = {1},
 month = jan,
 year = {2008},
 issn = {0362-1340},
 pages = {197--208},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1328897.1328464},
 doi = {10.1145/1328897.1328464},
 acmid = {1328464},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFL reachability, alias analysis, demand-driven analysis, memory disambiguation, pointer analysis},
}

% Alias analysis grammar
@article{10.1145/3093336.3037744,
 author = {Wang, Kai and Hussain, Aftab and Zuo, Zhiqiang and Xu, Guoqing and Amiri Sani, Ardalan},
 title = {Graspan: A Single-Machine Disk-Based Graph System for Interprocedural Static Analyses of Large-Scale Systems Code},
 year = {2017},
 issue_date = {April 2017},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 volume = {52},
 number = {4},
 issn = {0362-1340},
 url = {https://doi.org/10.1145/3093336.3037744},
 doi = {10.1145/3093336.3037744},
 abstract = {There is more than a decade-long history of using static analysis to find bugs in systems such as Linux. Most of the existing static analyses developed for these systems are simple checkers that find bugs based on pattern matching. Despite the presence of many sophisticated interprocedural analyses, few of them have been employed to improve checkers for systems code due to their complex implementations and poor scalability. In this paper, we revisit the scalability problem of interprocedural static analysis from a "Big Data" perspective. That is, we turn sophisticated code analysis into Big Data analytics and leverage novel data processing techniques to solve this traditional programming language problem. We develop Graspan, a disk-based parallel graph system that uses an edge-pair centric computation model to compute dynamic transitive closures on very large program graphs.We implement context-sensitive pointer/alias and dataflow analyses on Graspan. An evaluation of these analyses on large codebases such as Linux shows that their Graspan implementations scale to millions of lines of code and are much simpler than their original implementations. Moreover, we show that these analyses can be used to augment the existing checkers; these augmented checkers uncovered 132 new NULL pointer bugs and 1308 unnecessary NULL tests in Linux 4.4.0-rc5, PostgreSQL 8.3.9, and Apache httpd 2.2.18.},
 journal = {SIGPLAN Not.},
 month = apr,
 pages = {389--404},
 numpages = {16},
 keywords = {disk-based systems, static analysis, graph processing}
}